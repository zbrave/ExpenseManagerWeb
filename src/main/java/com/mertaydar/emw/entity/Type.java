package com.mertaydar.emw.entity;
// Generated 19.Tem.2017 22:36:54 by Hibernate Tools 5.2.3.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Type generated by hbm2java
 */
@Entity
@Table(name = "type", catalog = "expense_manager", uniqueConstraints = @UniqueConstraint(columnNames = "name"))
public class Type implements java.io.Serializable {

	private TypeId id;
	private Type type;
	private String name;private Set<Item>items=new HashSet<Item>(0);
	private Set<Type> types = new HashSet<Type>(0);

	public Type() {
	}

	public Type(TypeId id, Type type, String name) {
		this.id = id;
		this.type = type;
		this.name = name;
	}

	public Type(TypeId id, Type type, String name, Set<Item> items, Set<Type> types) {
       this.id = id;
       this.type = type;
       this.name = name;
       this.items = items;
       this.types = types;
    }
   
     @EmbeddedId

    
    @AttributeOverrides( {
        @AttributeOverride(name="id", column=@Column(name="id", nullable=false) ), 
        @AttributeOverride(name="typeId", column=@Column(name="type_id", nullable=false) ) } )
    public TypeId getId() {
        return this.id;
    }

	public void setId(TypeId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "type_id", nullable = false, insertable = false, updatable = false)
	public Type getType() {
		return this.type;
	}

	public void setType(Type type) {
		this.type = type;
	}

	@Column(name = "name", unique = true, nullable = false, length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

@OneToMany(fetch=FetchType.LAZY, mappedBy="type")
    public Set<Item> getItems() {
        return this.items;
    }

	public void setItems(Set<Item> items) {
        this.items = items;
    }

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "type")
	public Set<Type> getTypes() {
		return this.types;
	}

	public void setTypes(Set<Type> types) {
		this.types = types;
	}

}
